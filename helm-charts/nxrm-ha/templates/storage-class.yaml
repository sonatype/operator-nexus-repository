# For local: we create a storage class below based on Kubernetes recommendation: https://kubernetes.io/docs/concepts/storage/storage-classes/#local
# In addition, having this storage class allows us to do automatic creation of persistent volume claims based on the
# pre created persistent volume objects. See statefulset's volumeClaimTemplates for 'nexusdata' volume for how we use this.
{{- if and $.Values.nexusData.local.enabled (not $.Values.nexusData.nfs.enabled ) }}
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: {{ .Values.nexusData.storageClass.name}}
provisioner: {{ .Values.nexusData.local.storageClass.provisioner }}
volumeBindingMode: WaitForFirstConsumer
reclaimPolicy: {{ .Values.nexusData.storageClass.reclaimPolicy }}
---
{{- end -}}
{{- if and $.Values.nexusData.nfs.enabled (not $.Values.nexusData.local.enabled ) }}
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: {{ .Values.nexusData.storageClass.name}}
provisioner: {{ .Values.nexusData.nfs.storageClass.provisioner }}
volumeBindingMode: WaitForFirstConsumer
reclaimPolicy: {{ .Values.nexusData.storageClass.reclaimPolicy }}
---
{{- end -}}
{{- if and .Values.nexusData.dynamicVolume.enabled (not $.Values.nexusData.nfs.enabled) (not $.Values.nexusData.local.enabled) }}
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: {{ .Values.nexusData.storageClass.name}}
provisioner: {{ .Values.nexusData.dynamicVolume.storageClass.provisioner }}
volumeBindingMode: WaitForFirstConsumer
reclaimPolicy: {{ .Values.nexusData.storageClass.reclaimPolicy }}
parameters:
{{- with .Values.nexusData.dynamicVolume.parameters }}
  {{- toYaml . | nindent 2 }}
{{- end }}
{{- end -}}